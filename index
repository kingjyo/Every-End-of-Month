<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 20px;
    }
    
    .container {
      background: white;
      border-radius: 20px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
      padding: 40px;
      max-width: 800px;
      width: 100%;
    }
    
    h1 {
      color: #333;
      margin-bottom: 10px;
      font-size: 28px;
      text-align: center;
    }
    
    .subtitle {
      text-align: center;
      color: #666;
      margin-bottom: 30px;
      font-size: 14px;
    }
    
    .base-date-info {
      background: #f0f7ff;
      border: 2px solid #4285f4;
      border-radius: 10px;
      padding: 15px;
      margin-bottom: 30px;
      text-align: center;
    }
    
    .base-date-info h3 {
      color: #4285f4;
      margin-bottom: 10px;
      font-size: 18px;
    }
    
    .base-date-info .date-display {
      font-size: 24px;
      font-weight: bold;
      color: #333;
      margin-bottom: 10px;
    }
    
    .base-date-info .info-text {
      font-size: 12px;
      color: #666;
      line-height: 1.5;
    }
    
    .filter-rules {
      background: #fff9e6;
      border: 1px solid #ffc107;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 30px;
    }
    
    .filter-rules h4 {
      color: #ff6b00;
      margin-bottom: 10px;
      font-size: 16px;
    }
    
    .filter-rules ul {
      margin-left: 20px;
      color: #666;
      font-size: 13px;
      line-height: 1.8;
    }
    
    .filter-rules ul li {
      margin-bottom: 5px;
    }
    
    .filter-rules .highlight {
      background: #ffeb3b;
      padding: 2px 4px;
      border-radius: 3px;
      font-weight: bold;
      color: #333;
    }
    
    .drop-zone {
      border: 3px dashed #4285f4;
      border-radius: 15px;
      padding: 60px 20px;
      text-align: center;
      background: #f8f9ff;
      transition: all 0.3s ease;
      cursor: pointer;
      position: relative;
      overflow: hidden;
    }
    
    .drop-zone:hover {
      background: #e8f0ff;
      border-color: #1a73e8;
    }
    
    .drop-zone.dragover {
      background: #c8e6c9;
      border-color: #4caf50;
      transform: scale(1.02);
    }
    
    .drop-zone-icon {
      font-size: 60px;
      color: #4285f4;
      margin-bottom: 20px;
    }
    
    .drop-zone-text {
      font-size: 18px;
      color: #555;
      margin-bottom: 10px;
    }
    
    .drop-zone-subtext {
      font-size: 14px;
      color: #999;
    }
    
    input[type="file"] {
      display: none;
    }
    
    .file-list {
      margin-top: 30px;
      max-height: 200px;
      overflow-y: auto;
    }
    
    .file-item {
      background: #f5f5f5;
      border-radius: 8px;
      padding: 12px 15px;
      margin-bottom: 10px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      animation: slideIn 0.3s ease;
    }
    
    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .file-item.success {
      background: #e8f5e9;
      border-left: 4px solid #4caf50;
    }
    
    .file-item.error {
      background: #ffebee;
      border-left: 4px solid #f44336;
    }
    
    .file-item.processing {
      background: #fff3e0;
      border-left: 4px solid #ff9800;
    }
    
    .file-name {
      font-weight: 500;
      color: #333;
      flex: 1;
    }
    
    .file-status {
      font-size: 12px;
      padding: 4px 8px;
      border-radius: 4px;
      background: white;
      margin-left: 10px;
    }
    
    .file-status.success {
      color: #4caf50;
    }
    
    .file-status.error {
      color: #f44336;
    }
    
    .file-status.processing {
      color: #ff9800;
    }
    
    .button-group {
      display: flex;
      gap: 10px;
      margin-top: 30px;
      justify-content: center;
    }
    
    .btn {
      padding: 12px 30px;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .btn-primary {
      background: #4285f4;
      color: white;
    }
    
    .btn-primary:hover {
      background: #1a73e8;
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(66, 133, 244, 0.3);
    }
    
    .btn-primary:disabled {
      background: #ccc;
      cursor: not-allowed;
      transform: none;
    }
    
    .btn-secondary {
      background: #f1f3f4;
      color: #5f6368;
    }
    
    .btn-secondary:hover {
      background: #e8eaed;
    }
    
    .progress-bar {
      display: none;
      height: 4px;
      background: #e0e0e0;
      border-radius: 2px;
      margin-top: 20px;
      overflow: hidden;
    }
    
    .progress-bar.active {
      display: block;
    }
    
    .progress-fill {
      height: 100%;
      background: #4285f4;
      border-radius: 2px;
      transition: width 0.3s ease;
      animation: progress 2s ease-in-out infinite;
    }
    
    @keyframes progress {
      0% { width: 0%; }
      50% { width: 70%; }
      100% { width: 100%; }
    }
    
    .loader {
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid #f3f3f3;
      border-top: 2px solid #4285f4;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-left: 10px;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .result-summary {
      margin-top: 30px;
      padding: 20px;
      background: #f8f9fa;
      border-radius: 10px;
      display: none;
    }
    
    .result-summary.show {
      display: block;
      animation: fadeIn 0.5s ease;
    }
    
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .result-summary h3 {
      color: #333;
      margin-bottom: 15px;
      font-size: 18px;
    }
    
    .result-stats {
      display: flex;
      gap: 20px;
      justify-content: space-around;
      margin-top: 15px;
    }
    
    .stat-item {
      text-align: center;
    }
    
    .stat-number {
      font-size: 28px;
      font-weight: bold;
      color: #4285f4;
    }
    
    .stat-label {
      font-size: 12px;
      color: #666;
      margin-top: 5px;
    }
    
    .sheet-details {
      margin-top: 15px;
      padding: 10px;
      background: white;
      border-radius: 5px;
      max-height: 150px;
      overflow-y: auto;
    }
    
    .sheet-details h4 {
      font-size: 14px;
      color: #666;
      margin-bottom: 10px;
    }
    
    .sheet-list {
      font-size: 12px;
      color: #333;
      line-height: 1.6;
    }
    
    .sheet-imported {
      color: #4caf50;
      margin-right: 10px;
    }
    
    .sheet-skipped {
      color: #ff9800;
      margin-right: 10px;
      text-decoration: line-through;
      opacity: 0.7;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>📊 엑셀 데이터 가져오기</h1>
    <p class="subtitle">거래처원장, 구매내역서, 청구서 등의 엑셀 파일을 드래그하여 가져오세요</p>
    
    <!-- Google Apps Script 환경이 아닐 때 경고 -->
    <div id="envWarning" style="display: none; background: #fff3cd; border: 1px solid #ffc107; border-radius: 8px; padding: 15px; margin-bottom: 20px; text-align: center;">
      <strong>⚠️ 미리보기 모드</strong><br>
      이 화면은 UI 미리보기입니다. 실제 기능은 Google Sheets의<br>
      "📊 마감작업 자동화" 메뉴에서 실행해주세요.
    </div>
    
    <!-- 기준 년/월 표시 -->
    <div class="base-date-info">
      <h3>📅 현재 기준 년/월</h3>
      <div class="date-display" id="baseDateDisplay">불러오는 중...</div>
      <div class="info-text">
        총 정리 표의 D1(년도), F1(월)에서 자동으로 읽어옵니다<br>
        기준 년/월에 맞는 시트만 자동으로 필터링됩니다
      </div>
    </div>
    
    <!-- 필터링 규칙 안내 -->
    <div class="filter-rules">
      <h4>🔍 자동 필터링 규칙</h4>
      <ul>
        <li><strong>거래처원장:</strong> <span class="highlight" id="filterPattern1">YY.MM</span> 형식의 시트만 가져옴</li>
        <li><strong>구매내역서:</strong> <span class="highlight" id="filterPattern2">YY.M</span> 시트와 <span class="highlight" id="filterPattern3">YY.M월 구매내역서</span> 시트를 모두 가져옴</li>
        <li><strong>청구서/사료내역서:</strong> 모든 시트 가져옴 (필터링 없음)</li>
      </ul>
    </div>
    
    <!-- 드롭존 -->
    <div class="drop-zone" id="dropZone">
      <div class="drop-zone-icon">📁</div>
      <div class="drop-zone-text">여기에 엑셀 파일을 드래그하세요</div>
      <div class="drop-zone-subtext">또는 클릭하여 파일 선택 (여러 파일 가능)</div>
      <input type="file" id="fileInput" multiple accept=".xlsx,.xls">
    </div>
    
    <!-- 진행 상태 바 -->
    <div class="progress-bar" id="progressBar">
      <div class="progress-fill"></div>
    </div>
    
    <!-- 파일 목록 -->
    <div class="file-list" id="fileList"></div>
    
    <!-- 결과 요약 -->
    <div class="result-summary" id="resultSummary">
      <h3>📊 가져오기 결과</h3>
      <div class="result-stats">
        <div class="stat-item">
          <div class="stat-number" id="totalFiles">0</div>
          <div class="stat-label">전체 파일</div>
        </div>
        <div class="stat-item">
          <div class="stat-number" id="successFiles">0</div>
          <div class="stat-label">성공</div>
        </div>
        <div class="stat-item">
          <div class="stat-number" id="totalSheets">0</div>
          <div class="stat-label">가져온 시트</div>
        </div>
        <div class="stat-item">
          <div class="stat-number" id="skippedSheets">0</div>
          <div class="stat-label">건너뛴 시트</div>
        </div>
      </div>
      <div class="sheet-details" id="sheetDetails" style="display: none;">
        <h4>시트 상세 정보:</h4>
        <div class="sheet-list" id="sheetList"></div>
      </div>
    </div>
    
    <!-- 버튼 그룹 -->
    <div class="button-group">
      <button class="btn btn-secondary" onclick="clearFiles()">초기화</button>
      <button class="btn btn-primary" id="importBtn" onclick="importFiles()" disabled>가져오기 시작</button>
      <button class="btn btn-secondary" onclick="closeDialog()">닫기</button>
    </div>
  </div>
  
  <script>
    let selectedFiles = [];
    let processResults = {
      total: 0,
      success: 0,
      totalSheets: 0,
      skippedSheets: 0,
      details: []
    };
    
    // Google Apps Script 환경 체크
    const isGoogleAppsScript = typeof google !== 'undefined' && google.script;
    
    // 페이지 로드 시 기준 년/월 가져오기
    window.onload = function() {
      if (isGoogleAppsScript) {
        google.script.run
          .withSuccessHandler(displayBaseDate)
          .withFailureHandler(function(error) {
            console.error('기준 년/월 로드 실패:', error);
            document.getElementById('baseDateDisplay').textContent = '로드 실패';
          })
          .getBaseYearMonth();
      } else {
        // 미리보기 환경에서는 예시 데이터 표시
        document.getElementById('envWarning').style.display = 'block';
        displayBaseDate({
          year: '2025',
          month: '01',
          yearShort: '25',
          monthShort: '1'
        });
        console.log('📌 이 HTML은 Google Apps Script 환경에서 실행되어야 합니다.');
      }
    };
    
    // 기준 년/월 표시
    function displayBaseDate(baseDate) {
      if (baseDate) {
        document.getElementById('baseDateDisplay').textContent = 
          `${baseDate.year}년 ${baseDate.month}월`;
        
        // 필터링 패턴 업데이트
        document.getElementById('filterPattern1').textContent = 
          `${baseDate.yearShort}.${baseDate.month}`;
        document.getElementById('filterPattern2').textContent = 
          `${baseDate.yearShort}.${baseDate.monthShort}`;
        document.getElementById('filterPattern3').textContent = 
          `${baseDate.yearShort}.${baseDate.monthShort}월 구매내역서`;
      }
    }
    
    // 드래그 앤 드롭 이벤트 설정
    const dropZone = document.getElementById('dropZone');
    const fileInput = document.getElementById('fileInput');
    
    dropZone.addEventListener('click', () => fileInput.click());
    
    dropZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropZone.classList.add('dragover');
    });
    
    dropZone.addEventListener('dragleave', () => {
      dropZone.classList.remove('dragover');
    });
    
    dropZone.addEventListener('drop', (e) => {
      e.preventDefault();
      dropZone.classList.remove('dragover');
      handleFiles(e.dataTransfer.files);
    });
    
    fileInput.addEventListener('change', (e) => {
      handleFiles(e.target.files);
    });
    
    // 파일 처리
    function handleFiles(files) {
      selectedFiles = Array.from(files).filter(file => {
        const ext = file.name.split('.').pop().toLowerCase();
        return ext === 'xlsx' || ext === 'xls';
      });
      
      if (selectedFiles.length === 0) {
        alert('엑셀 파일(.xlsx, .xls)만 선택할 수 있습니다.');
        return;
      }
      
      displayFileList();
      document.getElementById('importBtn').disabled = false;
    }
    
    // 파일 목록 표시
    function displayFileList() {
      const fileList = document.getElementById('fileList');
      fileList.innerHTML = '';
      
      selectedFiles.forEach((file, index) => {
        const fileItem = document.createElement('div');
        fileItem.className = 'file-item';
        fileItem.id = `file-${index}`;
        fileItem.innerHTML = `
          <span class="file-name">${file.name}</span>
          <span class="file-status">대기 중</span>
        `;
        fileList.appendChild(fileItem);
      });
    }
    
    // 파일 가져오기
    async function importFiles() {
      if (selectedFiles.length === 0) {
        alert('파일을 선택해주세요.');
        return;
      }
      
      if (!isGoogleAppsScript) {
        alert('⚠️ 이 기능은 Google Apps Script 환경에서만 작동합니다.\n\nGoogle Sheets에서 "📊 마감작업 자동화" 메뉴를 통해 실행해주세요.');
        return;
      }
      
      // 버튼 비활성화
      document.getElementById('importBtn').disabled = true;
      document.getElementById('progressBar').classList.add('active');
      
      // 결과 초기화
      processResults = {
        total: selectedFiles.length,
        success: 0,
        totalSheets: 0,
        skippedSheets: 0,
        details: []
      };
      
      // 각 파일 처리
      for (let i = 0; i < selectedFiles.length; i++) {
        const file = selectedFiles[i];
        const fileItem = document.getElementById(`file-${i}`);
        const statusElement = fileItem.querySelector('.file-status');
        
        // 처리 중 상태
        fileItem.className = 'file-item processing';
        statusElement.textContent = '처리 중...';
        statusElement.innerHTML = '처리 중<span class="loader"></span>';
        
        try {
          // 파일을 Base64로 변환
          const base64 = await fileToBase64(file);
          
          // Google Apps Script 함수 호출
          await new Promise((resolve, reject) => {
            google.script.run
              .withSuccessHandler((result) => {
                if (result.success) {
                  fileItem.className = 'file-item success';
                  statusElement.className = 'file-status success';
                  statusElement.innerHTML = `✓ 완료 (${result.sheetsImported.length}개 시트)`;
                  
                  processResults.success++;
                  processResults.totalSheets += result.sheetsImported.length;
                  processResults.skippedSheets += (result.sheetsSkipped ? result.sheetsSkipped.length : 0);
                  
                  processResults.details.push({
                    fileName: file.name,
                    imported: result.sheetsImported,
                    skipped: result.sheetsSkipped || []
                  });
                } else {
                  fileItem.className = 'file-item error';
                  statusElement.className = 'file-status error';
                  statusElement.innerHTML = `✗ 실패: ${result.error}`;
                }
                resolve();
              })
              .withFailureHandler((error) => {
                fileItem.className = 'file-item error';
                statusElement.className = 'file-status error';
                statusElement.innerHTML = `✗ 오류: ${error}`;
                reject(error);
              })
              .importExcelToCurrentSheet(base64, file.name);
          });
          
        } catch (error) {
          console.error('파일 처리 오류:', error);
          fileItem.className = 'file-item error';
          statusElement.className = 'file-status error';
          statusElement.innerHTML = `✗ 오류`;
        }
      }
      
      // 완료 처리
      document.getElementById('progressBar').classList.remove('active');
      showResultSummary();
    }
    
    // 파일을 Base64로 변환
    function fileToBase64(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => {
          const base64 = reader.result.split(',')[1];
          resolve(base64);
        };
        reader.onerror = reject;
        reader.readAsDataURL(file);
      });
    }
    
    // 결과 요약 표시
    function showResultSummary() {
      document.getElementById('totalFiles').textContent = processResults.total;
      document.getElementById('successFiles').textContent = processResults.success;
      document.getElementById('totalSheets').textContent = processResults.totalSheets;
      document.getElementById('skippedSheets').textContent = processResults.skippedSheets;
      
      // 시트 상세 정보
      if (processResults.details.length > 0) {
        let detailsHTML = '';
        processResults.details.forEach(detail => {
          detailsHTML += `<div style="margin-bottom: 10px;">`;
          detailsHTML += `<strong>${detail.fileName}:</strong><br>`;
          
          if (detail.imported.length > 0) {
            detailsHTML += `<span class="sheet-imported">✓ 가져옴:</span> ${detail.imported.join(', ')}<br>`;
          }
          
          if (detail.skipped.length > 0) {
            detailsHTML += `<span class="sheet-skipped">⊘ 건너뜀:</span> ${detail.skipped.join(', ')}<br>`;
          }
          
          detailsHTML += `</div>`;
        });
        
        document.getElementById('sheetList').innerHTML = detailsHTML;
        document.getElementById('sheetDetails').style.display = 'block';
      }
      
      document.getElementById('resultSummary').classList.add('show');
      
      // 성공 메시지
      if (processResults.success === processResults.total) {
        setTimeout(() => {
          alert(`✅ 모든 파일을 성공적으로 가져왔습니다!\n\n` +
                `총 ${processResults.totalSheets}개 시트 가져옴\n` +
                `${processResults.skippedSheets}개 시트 건너뜀 (기준 월 불일치)`);
        }, 500);
      }
    }
    
    // 초기화
    function clearFiles() {
      selectedFiles = [];
      document.getElementById('fileList').innerHTML = '';
      document.getElementById('importBtn').disabled = true;
      document.getElementById('resultSummary').classList.remove('show');
      document.getElementById('fileInput').value = '';
      
      processResults = {
        total: 0,
        success: 0,
        totalSheets: 0,
        skippedSheets: 0,
        details: []
      };
    }
    
    // 다이얼로그 닫기
    function closeDialog() {
      if (isGoogleAppsScript) {
        google.script.host.close();
      } else {
        alert('👋 Google Sheets의 "📊 마감작업 자동화" 메뉴에서 사용해주세요!');
      }
    }
  </script>
</body>
</html>
